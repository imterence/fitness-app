generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  name                    String
  role                    UserRole
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  trainerId               String?
  accounts                Account[]
  clients                 Client[]               @relation("TrainerClients")
  clientProfile           Client?                @relation("ClientUser")
  assignedWorkouts        ClientWorkout[]        @relation("ClientWorkouts")
  assignedWorkoutPrograms ClientWorkoutProgram[] @relation("ClientWorkoutPrograms")
  clientConversations     Conversation[]         @relation("ClientConversations")
  trainerConversations    Conversation[]         @relation("TrainerConversations")
  sentMessages            Message[]              @relation("MessageSender")
  sessions                Session[]
  trainer                 User?                  @relation("TrainerClients", fields: [trainerId], references: [id])
  trainees                User[]                 @relation("TrainerClients")
  createdWorkouts         Workout[]              @relation("WorkoutCreator")
  createdWorkoutPrograms  WorkoutProgram[]       @relation("WorkoutProgramCreator")
}

model Client {
  id                 String    @id @default(cuid())
  userId             String    @unique
  trainerId          String?
  goals              String?
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  subscriptionEnd    DateTime?
  subscriptionPlan   String?   @default("BASIC")
  subscriptionStart  DateTime?
  subscriptionStatus String?   @default("INACTIVE")
  trainer            User?     @relation("TrainerClients", fields: [trainerId], references: [id], onDelete: Cascade)
  user               User      @relation("ClientUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id                  String               @id @default(cuid())
  name                String
  category            String
  description         String?
  muscleGroups        String[]
  equipment           String[]
  difficulty          ExerciseDifficulty
  instructions        String?
  videoUrl            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  workoutDayExercises WorkoutDayExercise[]
  workoutExercises    WorkoutExercise[]
  progress            WorkoutProgress[]
}

model WorkoutProgram {
  id          String                 @id @default(cuid())
  name        String
  description String?
  category    String?
  difficulty  WorkoutDifficulty?
  totalDays   Int                    @default(7)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  creatorId   String
  status      WorkoutLibraryStatus   @default(DRAFT)
  assignedTo  ClientWorkoutProgram[]
  days        WorkoutDay[]
  creator     User                   @relation("WorkoutProgramCreator", fields: [creatorId], references: [id])
}

model WorkoutDay {
  id                String               @id @default(cuid())
  programId         String
  dayNumber         Int
  name              String?
  isRestDay         Boolean              @default(false)
  estimatedDuration Int?
  notes             String?
  program           WorkoutProgram       @relation(fields: [programId], references: [id], onDelete: Cascade)
  exercises         WorkoutDayExercise[]

  @@unique([programId, dayNumber])
}

model WorkoutDayExercise {
  id         String     @id @default(cuid())
  dayId      String
  exerciseId String
  order      Int
  sets       Int
  reps       String
  rest       String
  notes      String?
  day        WorkoutDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([dayId, exerciseId, order])
}

model Workout {
  id                String               @id @default(cuid())
  name              String
  description       String?
  category          String?
  difficulty        WorkoutDifficulty?
  estimatedDuration Int?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  creatorId         String
  status            WorkoutLibraryStatus @default(DRAFT)
  assignedTo        ClientWorkout[]
  creator           User                 @relation("WorkoutCreator", fields: [creatorId], references: [id])
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  exerciseId String
  order      Int
  sets       Int
  reps       String
  rest       String
  notes      String?
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseId, order])
}

model ClientWorkoutProgram {
  id             String                 @id @default(cuid())
  clientId       String
  programId      String
  startDate      DateTime
  currentDay     Int                    @default(1)
  status         WorkoutProgramStatus   @default(ACTIVE)
  notes          String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  client         User                   @relation("ClientWorkoutPrograms", fields: [clientId], references: [id], onDelete: Cascade)
  program        WorkoutProgram         @relation(fields: [programId], references: [id], onDelete: Cascade)
  dayAssignments ProgramDayAssignment[]
  dailyProgress  WorkoutDayProgress[]
}

model ProgramDayAssignment {
  id                     String               @id @default(cuid())
  clientWorkoutProgramId String
  dayNumber              Int
  scheduledDate          DateTime
  status                 WorkoutStatus        @default(SCHEDULED)
  notes                  String?
  completedAt            DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  clientWorkoutProgram   ClientWorkoutProgram @relation(fields: [clientWorkoutProgramId], references: [id], onDelete: Cascade)

  @@unique([clientWorkoutProgramId, dayNumber])
}

model ClientWorkout {
  id            String            @id @default(cuid())
  clientId      String
  workoutId     String
  scheduledDate DateTime
  completedAt   DateTime?
  status        WorkoutStatus     @default(SCHEDULED)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  client        User              @relation("ClientWorkouts", fields: [clientId], references: [id], onDelete: Cascade)
  workout       Workout           @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  progress      WorkoutProgress[]
}

model WorkoutDayProgress {
  id                     String               @id @default(cuid())
  clientWorkoutProgramId String
  dayNumber              Int
  completedAt            DateTime             @default(now())
  status                 WorkoutDayStatus     @default(COMPLETED)
  notes                  String?
  clientWorkoutProgram   ClientWorkoutProgram @relation(fields: [clientWorkoutProgramId], references: [id], onDelete: Cascade)
}

model WorkoutProgress {
  id              String        @id @default(cuid())
  clientWorkoutId String
  exerciseId      String
  sets            Int
  reps            String
  weight          Float?
  time            Int?
  distance        Float?
  notes           String?
  completedAt     DateTime      @default(now())
  clientWorkout   ClientWorkout @relation(fields: [clientWorkoutId], references: [id], onDelete: Cascade)
  exercise        Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  clientId  String
  trainerId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  client    User      @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  trainer   User      @relation("TrainerConversations", fields: [trainerId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([clientId, trainerId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType  @default(TEXT)
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

enum UserRole {
  TRAINER
  CLIENT
  ADMIN
}

enum ExerciseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  MISSED
  CANCELLED
}

enum WorkoutProgramStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum WorkoutDayStatus {
  COMPLETED
  PARTIALLY_COMPLETED
  MISSED
  REST_DAY
}

enum WorkoutLibraryStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
